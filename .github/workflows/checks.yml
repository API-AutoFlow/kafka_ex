name: Elixir Checks

on: [push, pull_request]
  # push:
  #   branches: [ master ]
  # pull_request:
  #   branches: [ master ]


jobs:
  setup:
    name: check / setup
    runs-on: ubuntu-latest
    env:
      MIX_ENV: dev
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true

    strategy:
      matrix:
        include:
          - elixir: 1.10.2
            erlang: 22.3
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-elixir@v1
        with:
          elixir-version: ${{matrix.elixir}} # Define the elixir version [required]
          otp-version: ${{matrix.erlang}} # Define the OTP version [required]

      - name: Retrieve Mix Dependencies Cache
        uses: actions/cache@v2
        id: mix-cache # id to use in retrieve action
        with:
          path: deps
          key: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-mix-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}
  
      - name: Retrieve Mix Dependencies Compilation Cache
        uses: actions/cache@v2
        id: mix-deps-compile-cache # id to use in retrieve action
        with:
          path: _build
          key: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-mix-deps-compile-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}
      - name: Install Mix Dependencies
        if: steps.mix-cache.outputs.cache-hit != 'true'
        run: |
          mix local.rebar --force
          mix local.hex --force
          mix deps.get

      - name: Compile Mix Dependencies
        if: steps.mix-deps-compile-cache.outputs.cache-hit != 'true'
        run: mix deps.compile



  compile:
    name: check 
    runs-on: ubuntu-latest
    needs: [setup]
    env:
      MIX_ENV: dev

    strategy:
      matrix:
        include:
          - elixir: 1.10.2
            erlang: 22.3
        checks:
          - credo --struct
          - compile --warnings-as-errors --force
          - format --check-formatted

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-elixir@v1
        with:
          elixir-version: ${{matrix.elixir}} # Define the elixir version [required]
          otp-version: ${{matrix.erlang}} # Define the OTP version [required]

      - name: Retrieve Mix Dependencies Cache
        uses: actions/cache@v2
        id: mix-cache # id to use in retrieve action
        with:
          path: deps
          key: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-mix-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}
  
      - name: Retrieve Mix Dependencies Compilation Cache
        uses: actions/cache@v2
        id: mix-deps-compile-cache # id to use in retrieve action
        with:
          path: _build
          key: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-mix-deps-compile-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}
     
      - run: mix ${{ matrix.checks }}
    
  dialyzer:
    name: check / dialyzer
    needs: [setup]
    runs-on: ubuntu-latest
    env:
      MIX_ENV: dev

    strategy:
      matrix:
        include:
          - elixir: 1.10.2
            erlang: 22.3

    steps:
      - uses: actions/checkout@v2
      - name: Setup elixir
        uses: actions/setup-elixir@v1
        with:
          elixir-version: ${{matrix.elixir}} # Define the elixir version [required]
          otp-version: ${{matrix.erlang}} # Define the OTP version [required]
      - name: Retrieve Mix Dependencies Cache
        uses: actions/cache@v2
        id: mix-cache # id to use in retrieve action
        with:
          path: deps
          key: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-mix-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}
  
      - name: Retrieve Mix Dependencies Compilation Cache
        uses: actions/cache@v2
        id: mix-deps-compile-cache # id to use in retrieve action
        with:
          path: _build
          key: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-mix-deps-compile-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}
     
      - name: Retrieve PLT Cache
        uses: actions/cache@v1
        id: plt-cache
        with:
          path: priv/plts
          key: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-plts-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}

      - name: Create PLTs
        if: steps.plt-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p priv/plts
          mix dialyzer --plt

      - name: Run dialyzer
        run: mix dialyzer --no-check --halt-exit-status




      